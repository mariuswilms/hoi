# Copyright 2013 Atelier Disko. All rights reserved.
#
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Rate Limit Requests Server Wide, 1m per 16K IPs; set to hold max. 48K
limit_req_zone $binary_remote_addr zone={{.P.Name}}_{{.P.Context}}:3m rate=500r/s;

{{range $domain := .P.Domain -}}
#
# Define canonical server: {{$domain.FQDN}}
#
server {
	{{if $domain.SSL.IsEnabled -}}
	listen 443 ssl{{if not $.S.NGINX.UseLegacy}} http2{{end}};
	{{else -}}
	listen 80;
	{{- end}}
	
	# Access log disabled by default for performance reasons.
	access_log off;
	{{if $.S.NGINX.UseLegacy -}}
	error_log stderr warn;
	{{else -}}
	error_log syslog:server=unix:/dev/log warn;
	{{- end}}

	server_name 
	{{if eq $domain.WWW "add" -}}
		www.{{$domain.FQDN}}
	{{else if eq $domain.WWW "drop" -}}
		{{$domain.FQDN}}
	{{else -}}
		{{$domain.FQDN}}
		www.{{$domain.FQDN}}
	{{- end}}
	{{range $alias := $domain.Aliases}}
		{{if eq $domain.WWW "add" -}}
		www.{{$alias}}
		{{else if eq $domain.WWW "drop" -}}
		{{$alias}}
		{{else -}}
		{{$alias}}
		www.{{$alias}}
		{{- end}}
	{{- end}}
	;

	root {{$.P.Path}}/{{$.P.Webroot}};
	
	# Rate limit.
	limit_req zone={{$.P.Name}}_{{$.P.Context}} burst=50 nodelay;

	{{if $domain.SSL.IsEnabled -}}
	include {{$.WebConfigPath}}/includes/ssl.conf;
	ssl_certificate {{call $.GetSSLCertificate $domain.FQDN}};
	ssl_certificate_key {{call $.GetSSLCertificateKey $domain.FQDN}};
	{{- end}}

	# Public sub-resources.
	{{if $.P.UseAssets -}}
		{{if $.P.UseClassicAssets}}
	location ~ ^/(js|css|img)/ {
		{{else}}
	location /{{if $.P.UseNoConflict}}_{{end}}assets/ {
		alias {{$.P.Path}}{{if $.P.UseWebrootNesting}}/{{$.P.Webroot}}{{end}}/assets/;
		{{end}}
		include {{$.WebConfigPath}}/includes/assets.conf;
	}
	{{- end}}
	{{if $.P.UseMediaVersions -}}
	location /{{if $.P.UseNoConflict}}_{{end}}media/ {
		alias {{$.P.Path}}{{if $.P.UseWebrootNesting}}/{{$.P.Webroot}}{{end}}/media_versions/;
		include {{$.WebConfigPath}}/includes/media.conf;
	}
	{{- end}}
	
	{{if $.P.UseFiles -}}
	# Internal/protected sub-resources: these can be served by the application
	# by sending a X-Sendfile header.
	location /{{if $.P.UseNoConflict}}_{{end}}internal/files/ {
		internal;
		alias {{$.P.Path}}{{if $.P.UseWebrootNesting}}/{{$.P.Webroot}}{{end}}/files/;
	}
	{{- end}}
	{{if $.P.UseMediaTransfers -}}
	location /{{if $.P.UseNoConflict}}_{{end}}internal/media/ {
		internal;
		alias {{$.P.Path}}{{if $.P.UseWebrootNesting}}/{{$.P.Webroot}}{{end}}/media/;
	}
	{{- end}}

	# Never route requests for files we know aren't ever served by the backend
	# into it, that is expensive. This will also reduce noise generated by the
	# application when that file cannot be served. We don't include "robots.txt"
	# here as that might be dynamically generated through the application.
	location = /favicon.ico {
		try_files $uri =404;
	}

	# Main resource (webroot).
	location / {
		root {{$.P.Path}}/{{$.P.Webroot}};
		{{- if $domain.Auth.IsEnabled }}
		# Protected i.e. because this is a preview on staging. Not protecting
		# media/assets directories as this will make some browsers prompt for a
		# password multiple times.	
		include {{$.WebConfigPath}}/includes/access.conf;
		{{- end}}
		include {{$.WebConfigPath}}/includes/app.conf;
	}
}

	{{/* BEGIN MAIN */}}
	{{- if ne $domain.WWW "keep"}}
# {{$domain.FQDN}} redirect www/naked to main
		{{if $domain.SSL.IsEnabled -}}
server {
	listen 443 ssl{{if not $.S.NGINX.UseLegacy}} http2{{end}};
	server_name {{if eq $domain.WWW "drop"}}www.{{end}}{{$domain.FQDN}};

	include {{$.WebConfigPath}}/includes/ssl.conf;
	ssl_certificate {{call $.GetSSLCertificate $domain.FQDN}};
	ssl_certificate_key {{call $.GetSSLCertificateKey $domain.FQDN}};

	return 302 https://{{if eq $domain.WWW "add"}}www.{{end}}{{$domain.FQDN}}$request_uri;
}
server {
	listen 80;
	server_name www.{{$domain.FQDN}} {{$domain.FQDN}};
	return 302 https://{{if eq $domain.WWW "add"}}www.{{end}}{{$domain.FQDN}}$request_uri;
}
		{{else -}}
server {
	listen 80;
	server_name {{if eq $domain.WWW "drop"}}www.{{end}}{{$domain.FQDN}};
	return 302 http://{{if eq $domain.WWW "add"}}www.{{end}}{{$domain.FQDN}}$request_uri;
}
		{{- end}}
	{{- end}}
	{{/* END MAIN */}}

	{{/* BEGIN ALIASES */}}
	{{range $alias := $domain.Aliases -}}
		{{if ne $domain.WWW "keep" }}
# Redirect www/naked to aliased canonical: {{$alias}} 
			{{if $domain.SSL.IsEnabled -}}
server {
	listen 443 ssl{{if not $.S.NGINX.UseLegacy}} http2{{end}};
	server_name {{if eq $domain.WWW "drop"}}www.{{end}}{{$alias}};

	include {{$.WebConfigPath}}/includes/ssl.conf;
	ssl_certificate {{call $.GetSSLCertificate $domain.FQDN}};
	ssl_certificate_key {{call $.GetSSLCertificateKey $domain.FQDN}};

	return 302 https://{{if eq $domain.WWW "add"}}www.{{end}}{{$alias}}$request_uri;
}
server {
	listen 80;
	server_name www.{{$alias}} {{$alias}};
	return 302 http://{{if eq $domain.WWW "add"}}www.{{end}}{{$alias}}$request_uri;
}
			{{else -}}
server {
	listen 80;
	server_name {{if eq $domain.WWW "drop"}}www.{{end}}{{$alias}};
	return 302 http://{{if eq $domain.WWW "add"}}www.{{end}}{{$alias}}$request_uri;
}
			{{- end}}
		{{- end}}
	{{- end}}
	{{/* END ALIASES */}}

	{{/* BEGIN REDIRECTS */}}
	{{range $redirect := $domain.Redirects -}}
# Redirect www/naked to canonical {{$domain.FQDN}}: {{$redirect}}
		{{if $domain.SSL.IsEnabled -}}
server {
	listen 80;
	listen 443 ssl{{if not $.S.NGINX.UseLegacy}} http2{{end}};
	server_name www.{{$redirect}} {{$redirect}};
	
	include {{$.WebConfigPath}}/includes/ssl.conf;
	ssl_certificate {{call $.GetSSLCertificate $domain.FQDN}};
	ssl_certificate_key {{call $.GetSSLCertificateKey $domain.FQDN}};

	return 302 https://{{if eq $domain.WWW "add"}}www.{{end}}{{$domain.FQDN}}$request_uri;
}
		{{else -}}
server {
	listen 80;
	server_name www.{{$redirect}} {{$redirect}};
	return 302 http://{{if eq $domain.WWW "add"}}www.{{end}}{{$domain.FQDN}}$request_uri;
}
		{{- end}}
	{{- end}}
	{{/* END REDIRECTS */}}
{{- end}}
